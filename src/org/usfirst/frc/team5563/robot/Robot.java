// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc.team5563.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
//import edu.wpi.first.wpilibj.*;
// import edu.wpi.first.wpilibj.command.Subsystem;
// import edu.wpi.first.wpilibj.Timer;

import org.usfirst.frc.team5563.robot.commands.AutonomousCommand;
import org.usfirst.frc.team5563.robot.commands.DriveCommand;

import org.usfirst.frc.team5563.robot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	private Command autonomousCommand;
	public Command autonomousCommand(){
		return autonomousCommand;
	}

	private Command driveCommand;
	public Command driveCommand(){
		return driveCommand;
	}
	// Command pickupCommand;
	// Command runCompCommand;

	boolean arewedoneyet;

	private static OI oi;
	public static OI oi(){
		return oi;
	}
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static Drive drive;	
	public static Drive drive()
	{
		return drive;
	}
	
	// public static Launcher launcher;
	// public static PickerUpper pickerUpper;
	// public static RobotCompressor robotCompressor;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// public static Trigger trigger;
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		drive = new Drive();
		// launcher = new Launcher();
		// pickerUpper = new PickerUpper();
		// robotCompressor = new RobotCompressor();
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		// trigger = new Trigger();
		// driveCommand requires drive constructed above -Mr. A
		driveCommand = new DriveCommand();
		// pickupCommand = new PickupCommand();
		//
		// runCompCommand = new CompressorCommand();
		// runCompCommand.start();

		// This MUST be here. If the OI creates Commands (which it very likely
		// will), constructing it during the construction of CommandBase (from
		// which commands extend), subsystems are not guaranteed to be
		// yet. Thus, their requires() statements may grab null pointers. Bad
		// news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		autonomousCommand = new AutonomousCommand();
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		arewedoneyet = true;
	}

	//
	// AUTONOMOUS STUFF
	//
	public void autonomousInit() {
		// schedule the autonomous command (example)
		if (autonomousCommand != null) {
			autonomousCommand.start();
		}
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		LiveWindow.run();
		Scheduler.getInstance().run();
	}

	//
	// TELEOP STUFF
	//
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null) {
			autonomousCommand.cancel();
		}
		// direction = 0.0;
		// magnitude = 0.0;
		// rotation = 0.0;
		driveCommand.start();
		// pickupCommand.start();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		LiveWindow.run();
		Scheduler.getInstance().run();
	}

	//
	// PERIODIC STUFF
	//
	/**
	 * This function called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
