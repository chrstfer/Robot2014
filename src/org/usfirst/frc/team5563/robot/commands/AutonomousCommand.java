// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc.team5563.robot.commands;

import org.usfirst.frc.team5563.robot.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
//import edu.wpi.first.wpilibj.Timer;
//import org.usfirst.frc.team5563.robot.Robot;
//import org.usfirst.frc.team5563.robot.RobotMap;

/**
 *
 */
public class AutonomousCommand extends Command {

	// private ShooterIn retract = new ShooterIn();
	// private ShooterOut pressurize = new ShooterOut();
	// private TriggerUp fire = new TriggerUp();
	// private TriggerDown reload = new TriggerDown();
	// private PickupCommand pickup = new PickupCommand();

	public AutonomousCommand() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
//		RobotMap.dRobotDrive.drive(0.2, 0.0);
//		Timer.delay(0.5);
//		RobotMap.dRobotDrive.drive(0.0, 0.0);
		//
		// pressurize.autoExecute();
		// RobotMap.driveRobotDrive.mecanumDrive_Polar(.75, // 75% so as not to
		// drop ball
		// 5.0, // 0 degrees mvoes forward I am guessing... 5.o deg correct for
		// rightward drift
		// 0.0); // 0 percent turn
		// Timer.delay(3.0);
		// RobotMap.driveRobotDrive.stopMotor();
		// Timer.delay(1.5);
		// pickup.autoExecute(.5,1); // this sets speed and delay on dropping
		// the pickerUpper
		// fire.autoExecute();
		// Timer.delay(0.5);
		// reload.autoExecute();
		// Timer.delay(2.0);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return true;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
