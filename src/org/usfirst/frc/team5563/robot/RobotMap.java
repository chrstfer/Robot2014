// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc.team5563.robot;

//import edu.wpi.first.wpilibj.Jaguar;
//import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.RobotDrive;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
//import java.util.Vector;

//import org.usfirst.frc.team5563.robot.commands.*;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// public static SpeedController dFrontRight;
	// public static SpeedController dFrontLeft;
	// public static SpeedController dRearRight;
	// public static SpeedController dRearLeft;
	private static RobotDrive dRobotDrive;
	public static RobotDrive dRobotDrive(){
		return dRobotDrive;
	}

	// public static RobotDrive pickerUpperDrive;

	// public static DoubleSolenoid launcherLauncherDSol1;
	// public static DoubleSolenoid launcherLauncherDSol2;
	// public static DoubleSolenoid triggerDSol1;
	// public static Compressor robotCompressorCompressor1;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// public static Relay compressorFan;

	// public static DigitalInput pickerUpperInwardLimitSwitch;
	// public static DigitalInput pickerUpperOutwardLimitSwitch;
	// public static Talon pickerUpper;
	// public static Talon pickerUpperRight;
	// public static Talon pickerUpperLeft;

	public static void init() {

		dRobotDrive = new RobotDrive(1, 2, 3, 4);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// driveFrontRight = new Jaguar(1, 1);
		// LiveWindow.addActuator("Drive", "FrontRight", (Jaguar)
		// driveFrontRight);
		//
		// driveFrontLeft = new Jaguar(1, 2);
		// LiveWindow.addActuator("Drive", "FrontLeft", (Jaguar)
		// driveFrontLeft);
		//
		// driveRearRight = new Jaguar(1, 3);
		// LiveWindow.addActuator("Drive", "RearRight", (Jaguar)
		// driveRearRight);
		//
		// driveRearLeft = new Jaguar(1, 4);
		// LiveWindow.addActuator("Drive", "RearLeft", (Jaguar) driveRearLeft);
		//
		// // pickerUpper = new Talon(1,5);
		// //pickerUpperRight = new Talon(1,5);
		// //pickerUpperLeft = new Talon(1,6);
		//
		//
		// driveRobotDrive = new RobotDrive(driveFrontLeft, driveRearLeft,
		// driveFrontRight, driveRearRight);
		//
		// driveRobotDrive.setSafetyEnabled(true);
		// driveRobotDrive.setExpiration(0.1);
		// driveRobotDrive.setSensitivity(0.1);
		// driveRobotDrive.setMaxOutput(1.0);
		// driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight,true);
		// driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight,true);

		/*
		 * remove once we prove one talon is working pickerUpperDrive = new
		 * RobotDrive(pickerUpperRight, pickerUpperLeft);
		 * 
		 * pickerUpperDrive.setSafetyEnabled(false); //Need to invert both
		 * motors on left because in two motor drive I am not // sure which one
		 * affects left side.
		 * pickerUpperDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft,
		 * true);
		 * pickerUpperDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft,
		 * true); pickerUpperDrive.setExpiration(0.5);
		 * pickerUpperDrive.setSensitivity(0.5);
		 * pickerUpperDrive.setMaxOutput(1.0);
		 */

		// launcherLauncherDSol1 = new DoubleSolenoid(1, 1, 2);
		// launcherLauncherDSol2 = new DoubleSolenoid(1, 3, 4);
		//
		// triggerDSol1 = new DoubleSolenoid(1, 5, 6);
		//
		// robotCompressorCompressor1 = new Compressor(1, 1, 1, 1);
		// compressorFan = new Relay(1,2);
		// compressorFan.setDirection(Relay.Direction.kForward);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
